@using Ambacht.Common.Maps.Tiles
@using Ambacht.Common.Mathmatics
@inject IJSRuntime JsRuntime

<div @ref="_container" class="map-container"
     @onmousedown="OnMouseDown"
     @onmousemove="OnMouseMove"
     @onmouseup="OnMouseUp"
     @onmouseout="OnMouseOut"
     @onmousewheel="OnMouseWheel">
  <CascadingValue Value="_view">
    @ChildContent
  </CascadingValue>
</div>

<style>
  div.map-container {
    width: 100%;
    height: 100%;
    padding: 0px;
    margin: 0px;
    overflow-x: hidden;
    overflow-y: hidden;
  }

  img.tile {
    position: absolute;
    user-select: none;
    pointer-events: none;
    touch-action: none;
    z-index: -10;
  }
</style>

@code {


  [Parameter()]
	public LatLng Center { get; set; }

	[Parameter()]
	public EventCallback<LatLng> CenterChanged { get; set; }

  [Parameter()]
  public double ZoomAmount { get; set; }

  [Parameter()]
  public EventCallback<double> ZoomAmountChanged { get; set; }

  [Parameter()]
  public EventCallback<SlippyMapView> OnViewChanged { get; set; }

  [Parameter()]
  public double Angle { get; set; }

  [Parameter()]
  public RenderFragment ChildContent { get; set; }

  [Parameter()]
  public string Class { get; set; }

  /// <summary>
  /// Reference to the div container, used to retrieve the size
  /// </summary>
  private ElementReference _container;

  private SlippyMapView _view = new SlippyMapView()
  {
      TileSize = TileSize
  };


  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    var sizes = await JsRuntime.InvokeAsync<int[]>("Ambacht.getSize", _container);
    var size = new Vector2<double>(sizes[0], sizes[1]);
    await SetView(_view with {
      Coords = Center,
      Zoom = ZoomAmount,
      Angle = Angle,
      Size = size,
    });
  }

  protected override async Task OnParametersSetAsync()
  {
    await base.OnParametersSetAsync();
    await SetView(_view with {
      Coords = Center,
      Zoom = ZoomAmount,
      Angle = Angle,
      });
  }

  private const int TileSize = 256;


  private async Task SetView(SlippyMapView newView)
  {
      if (_view.Equals(newView))
      {
          return;
      }
      _view = newView;
      this.StateHasChanged();
      await OnViewChanged.InvokeAsync(_view);
  }

  #region panning state

  /// <summary>Pans the map</summary>
  /// <remarks>Delta are in component pixel space, which has the same scale as tile pixel space</remarks>
  public async Task Pan(Vector2<double> delta)
  {
      await SetView(_view.Pan(delta));

	    await CenterChanged.InvokeAsync(_view.Coords);
  }

    private bool _dragging = false;
  private Vector2<double> _previous;

    private void OnMouseDown(MouseEventArgs args)
    {
      if (args.Button == 0)
      {
        _dragging = true;
      _previous = new Vector2<double>(args.ClientX, args.ClientY);
      }
    }

    private void OnMouseUp(MouseEventArgs args)
    {
      if (args.Button == 0)
      {
        _dragging = false;
      }
    }

    private async Task OnMouseMove(MouseEventArgs args)
    {
      if (args.Button == 0)
      {
        if (_dragging)
        {
        var current = new Vector2<double>(args.ClientX, args.ClientY);
          var delta = current - _previous;
          _previous = current;
          await Pan(delta);
        }
      }
    }

    private void OnMouseOut(MouseEventArgs args)
    {
      _dragging = false;
    }

    private readonly Debounce debounceMouseMove = new Debounce(TimeSpan.FromMilliseconds(25));

    #endregion

    #region Scrolling

  public async Task Zoom(int deltaLevels, Vector2<double> pos)
    {
        var newZoomAmount = Math.Clamp(_view.ZoomLevel + deltaLevels, 1, 21);
        var center = SlippyMath.LatLngToPixel(_view.Coords, _view.ZoomLevel, TileSize);
        center -= _view.HalfSize;
        center += pos;
        await SetView(_view with {
        Coords = SlippyMath.PixelToLatLng(center, _view.ZoomLevel, TileSize),
          Zoom = newZoomAmount
          });
        await ZoomAmountChanged.InvokeAsync(_view.Zoom);
    }


    double _amountLeft = 0;
    double _amountPerLevel = 100;

    private async Task OnMouseWheel(WheelEventArgs args)
    {
        _amountLeft -= args.DeltaY;
        var levels = (int)(_amountLeft / _amountPerLevel);
        _amountLeft -= levels * _amountPerLevel;
        var current = new Vector2<double>(args.ClientX, args.ClientY);
        await Zoom(levels, current);
    }

    #endregion

}
